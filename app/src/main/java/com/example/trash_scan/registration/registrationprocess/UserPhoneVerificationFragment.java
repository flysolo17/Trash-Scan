package com.example.trash_scan.registration.registrationprocess;

import android.content.Intent;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.navigation.Navigation;

import android.os.CountDownTimer;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import com.example.trash_scan.junkshop.JunkshopOwner;
import com.example.trash_scan.MainActivity;
import com.example.trash_scan.ProgressDialog;
import com.example.trash_scan.R;
import com.example.trash_scan.firebase.models.User;
import com.example.trash_scan.registration.viewmodel.OtpSharedViewModel;
import com.google.android.material.snackbar.Snackbar;
import com.google.firebase.FirebaseException;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.PhoneAuthCredential;
import com.google.firebase.auth.PhoneAuthOptions;
import com.google.firebase.auth.PhoneAuthProvider;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.mukesh.OtpView;

import org.jetbrains.annotations.NotNull;

import java.util.concurrent.TimeUnit;

public class UserPhoneVerificationFragment extends Fragment {


    private OtpSharedViewModel otpSharedViewModel;
    private ProgressDialog progressDialog;
    private TextView textPhoneNumber;
    private String verificationCode,number;
    private OtpView otpView;
    private FirebaseAuth firebaseAuth;
    private Button buttonResendOTP;
    private FirebaseFirestore firebaseFirestore;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_user_phone_verification, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        initViews(view);
        firebaseFirestore = FirebaseFirestore.getInstance();
        progressDialog = new ProgressDialog(requireActivity());
        otpSharedViewModel = new ViewModelProvider(requireActivity()).get(OtpSharedViewModel.class); //Initialize OtpSharedViewModel
        firebaseAuth = FirebaseAuth.getInstance(); //Initialize Firebase Authentication

        otpSharedViewModel.getCode().observe(getViewLifecycleOwner(), code -> {
            //Get Verification code
            verificationCode = code.toString();
            if (!verificationCode.isEmpty()){
                verificationCodeCountDown();
            }
        });

        otpSharedViewModel.getPhoneNumber().observe(getViewLifecycleOwner(), phoneNumber -> {
            //Get Phone number
            number = phoneNumber.toString();
            if (!number.isEmpty()){
                textPhoneNumber.setText("+63"+number);
            }
        });
        otpView.setOtpCompletionListener(otp -> {
            verifyOTP(verificationCode,otp);
        });

        buttonResendOTP.setOnClickListener(v -> {
            resendOTP(number);
        });

    }
    /**
     * This method verifies the OTP that the user inputs.
     * @param verificationCode This parameter is autogenerated by firebase phone auth you will receive this code via text message
     * @param OTP This parameter is comes from user input. This parameter should match otherwise the user phone number shouldn't verified
     */
    private void verifyOTP(String verificationCode,String OTP){
        progressDialog.isLoading();
        PhoneAuthCredential phoneAuthCredential = PhoneAuthProvider.getCredential(verificationCode,OTP);
        firebaseAuth.signInWithCredential(phoneAuthCredential).addOnCompleteListener(task -> {
            if (task.isSuccessful()){
                FirebaseUser firebaseUser = firebaseAuth.getCurrentUser();
                if (firebaseUser != null){
                    progressDialog.stopLoading();
                    String phoneNumber = firebaseUser.getPhoneNumber(); //Getting the phone number of the current use
                    otpSharedViewModel.setPhoneNumber(phoneNumber);
                    Navigation.findNavController(requireView()).navigate(R.id.action_userPhoneVerificationFragment_to_createUserAccountFragment);
                }


            }else {
                Snackbar.make(requireView(),"failed",Snackbar.LENGTH_LONG).show();
                progressDialog.stopLoading();
            }
        });
    }

    //Verification Countdown. (60 seconds)
    private void verificationCodeCountDown(){
        new CountDownTimer(60000, 1000) {
            public void onTick(long millisUntilFinished) {
                buttonResendOTP.setText("" + millisUntilFinished / 1000);
                buttonResendOTP.setEnabled(false); //Disable the button to prevent multiple clicks
            }
            public void onFinish() {
                buttonResendOTP.setText("Resend");
                buttonResendOTP.setEnabled(true); //Enable the button once the countdown is finish
            }
        }.start();
    }

    /**
     * This method allows the user to resend verification code if the user didn't receive the code.
     * @param phone This parameter is from the previous activity that the user input.
     */
    private void resendOTP(String phone){
        PhoneAuthOptions options = PhoneAuthOptions.newBuilder(firebaseAuth)
                .setPhoneNumber("+63" + phone)       // Phone number to verify
                .setTimeout(60L, TimeUnit.SECONDS) // Timeout and unit
                .setActivity(requireActivity())                 // Activity (for callback binding)
                .setCallbacks(new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
                    @Override
                    public void onVerificationCompleted(@NonNull @org.jetbrains.annotations.NotNull PhoneAuthCredential phoneAuthCredential) {
                        Snackbar.make(requireView(),"OTP successfully sent!",Snackbar.LENGTH_SHORT).show();
                    }
                    @Override
                    public void onVerificationFailed(@NonNull @org.jetbrains.annotations.NotNull FirebaseException e) {
                        Snackbar.make(requireView(),"OTP failed to sent!",Snackbar.LENGTH_SHORT).show();
                    }
                    @Override
                    public void onCodeSent(@NonNull @NotNull String s, @NonNull @NotNull PhoneAuthProvider.ForceResendingToken forceResendingToken) {
                        super.onCodeSent(s, forceResendingToken);
                        verificationCode = s; // the previous code will replaced by new code sent via message to the user phone number
                        number = phone;
                        verificationCodeCountDown(); //reset the countdown
                    }
                }) // OnVerificationStateChangedCallbacks
                .build();
        PhoneAuthProvider.verifyPhoneNumber(options);
    }
    /**
     * This method is to check the phone number if exists to our database
     * The goal of this method is to prevent user creating multiple accounts using one phone number
     * @param phone this parameter is the one we check in the database
     */

    //not working
    private void checkUserIfExists(String phone){
        firebaseFirestore.collection(User.TABLE_NAME)
                .whereEqualTo(User.USER_PHONE_NUMBER,phone)
                .get().addOnCompleteListener(task -> {
            if (task.isComplete() && task.getResult() != null){
                if (task.getResult().isEmpty()) {
                    progressDialog.stopLoading();
                    otpSharedViewModel.setPhoneNumber(phone);
                    Navigation.findNavController(getView()).navigate(R.id.action_userPhoneVerificationFragment_to_createUserAccountFragment);
                }
            }
            else if (task.isSuccessful() && task.getResult() != null){
                for (DocumentSnapshot documentSnapshot : task.getResult()){
                    if (documentSnapshot.exists()) {
                        String userType = documentSnapshot.getString(User.ARG_USER_TYPE);
                        String userID = documentSnapshot.getId();
                        String fullname  = documentSnapshot.getString(User.ARG_FIRST_NAME) + documentSnapshot.getString(User.ARG_LAST_NAME);
                        if (userType.equals("home owner")){
                            //intent your home owner interface here
                            Intent intent = new Intent(requireActivity(), MainActivity.class);
                            intent.putExtra(User.ARG_USER_ID,userID);
                            intent.putExtra(User.ARG_FIRST_NAME,fullname);
                            progressDialog.stopLoading();
                            startActivity(intent);

                        }
                       else if (userType.equals("junk shop owner")){
                            //intent your junk shop owner interface here
                            progressDialog.stopLoading();
                            Intent intent = new Intent(requireActivity(), JunkshopOwner.class);
                            startActivity(intent);

                        } else {
                            otpSharedViewModel.setPhoneNumber(phone);
                            Navigation.findNavController(requireView()).navigate(R.id.action_userPhoneVerificationFragment_to_createUserAccountFragment);
                        }
                    } else {
                        progressDialog.stopLoading();
                        otpSharedViewModel.setPhoneNumber(phone);
                        Navigation.findNavController(requireView()).navigate(R.id.action_userPhoneVerificationFragment_to_createUserAccountFragment);
                    }
                }
            }
        });
    }

    private void initViews(View view){
        otpView = view.findViewById(R.id.phoneVerificationCode);
        textPhoneNumber = view.findViewById(R.id.textPhoneNumber);
        buttonResendOTP = view.findViewById(R.id.buttonResend);
    }
}